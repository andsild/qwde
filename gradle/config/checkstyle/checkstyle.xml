<?xml version="1.0"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">
    <!--
        If you set the basedir property below, then all reported file
        names will be relative to the specified directory. See
        http://checkstyle.sourceforge.net/5.x/config.html#Checker
        <property name="basedir" value="${basedir}"/>
    -->

    <!-- Checks that a package-info.java file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage
    <module name="JavadocPackage"/>-->

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf"/>
        <property name="fileExtensions" value="java, xml, js"/>
    </module>

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <!-- <module name="Translation"/> -->

    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="FileTabCharacter"/>

    <!-- Double empty lines -->
    <module name="RegexpMultiline">
      <property name="format" value="\n\n\n"/>
      <property name="message" value="Too many consecutive empty lines"/>
      <property name="fileExtensions" value="java"/>
    </module>

    <module name="TreeWalker">
        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName"/>
        <module name="MethodName"/>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>


        <!-- Checks for Headers                                -->
        <!-- See http://checkstyle.sf.net/config_header.html   -->
        <!-- <module name="Header">                            -->
        <!-- The follow property value demonstrates the ability     -->
        <!-- to have access to ANT properties. In this case it uses -->
        <!-- the ${basedir} property to allow Checkstyle to be run  -->
        <!-- from any directory within a project. See property      -->
        <!-- expansion,                                             -->
        <!-- http://checkstyle.sf.net/config.html#properties        -->
        <!-- <property                                              -->
        <!--     name="headerFile"                                  -->
        <!--     value="${basedir}/java.header"/>                   -->
        <!-- </module> -->

        <!-- Following interprets the header file as regular expressions. -->
        <!-- <module name="RegexpHeader"/>                                -->


        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport"/>
        <module name="IllegalImport"/>
        <!-- defaults to sun.* packages -->
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>

        <!-- Not currently enforcing import order, but this would match the specified order -->
        <module name="ImportOrder">
            <property name="groups" value="com, org, net, java, javax"/>
            <property name="ordered" value="true"/>
            <property name="separated" value="true"/>
            <property name="option" value="top"/>
        </module>

        <!-- We don't really enforce this, so no point in the check -->
        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <!--<module name="LineLength"/>-->
        <!--<module name="MethodLength"/>-->
        <!--<module name="ParameterNumber"/>-->


        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad"/>
        <module name="GenericWhitespace"/>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
        </module>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround">
            <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND"/>
        </module>
        <!-- Double space (for simplicity ignore lines with strings) -->
        <module name="RegexpSinglelineJava">
          <property name="format" value="^(?&gt; *)[^&quot;]+  "/>
          <property name="message" value="Double space"/>
        </module>
        <!-- Indentation (Indentation module is incorrect) -->
        <module name="Indentation">
            <property name="basicOffset" value="2"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="2"/>
            <property name="throwsIndent" value="4"/>
            </module>
        <!-- Avoid this.-prefix on method calls -->
        <module name="RegexpSinglelineJava">
            <property name="format" value="[^.]this\.[a-zA-Z0-9_]*\("/>
            <property name="message" value="Avoid this. prefix on method calls"/>
        </module>
        <!-- Cast to ObjectNode/ArrayNode considered unsafe -->
        <module name="RegexpSinglelineJava">
          <property name="format" value="\((Object|Array)Node\)"/>
          <property name="message" value="Cast to ObjectNode/ArrayNode should not be performed"/>
        </module>
        <!-- Forbid JsonNode.withArray() -->
        <module name="RegexpSinglelineJava">
          <property name="format" value="withArray\("/>
          <property name="message" value="Avoid usage of withArray() as the method can be used to mutate JsonNode objects"/>
        </module>

        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>


        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks">
            <property name="allowInSwitchCase" value="true"/>
        </module>


        <module name="EmptyBlock"/>
        <module name="LeftCurly"/>
        <module name="NeedBraces"/>
        <module name="RightCurly"/>


        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <!--<module name="AvoidInlineConditionals"/>-->
        <!-- No longer available after checkstyle 5.6: "http://sourceforge.net/p/checkstyle/bugs/682/" -->
        <!-- <module name="DoubleCheckedLocking"/> -->
        <!-- MY FAVOURITE -->
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
        <module name="HiddenField">
            <property name="ignoreSetter" value="true"/>
            <property name="ignoreConstructorParameter" value="true"/>
        </module>
        <module name="IllegalInstantiation"/>
        <module name="RegexpSinglelineJava">
            <property name="format" value="(valueOf|parse[a-zA-Z]*)\s*\(\s*&quot;[0-9.-]+&quot;"/>
            <property name="message" value="Magic number string"/>
        </module>
        <module name="MissingSwitchDefault"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <!--<module name="DesignForExtension"/>-->
        <module name="FinalClass"/>
        <module name="HideUtilityClassConstructor"/>
        <module name="InterfaceIsType"/>

        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle"/>
        <!--<module name="FinalParameters"/>-->
        <!--<module name="TodoComment"/>-->
        <module name="UpperEll"/>
        <!-- required for SuppressWarnignsFilter  -->
        <module name="SuppressWarningsHolder" />

    </module>
    <module name="SuppressWarningsFilter" />
    <!--
            Allow devs to suppress checkstyle warnings inline instead of using a central suppressions file.
            Use this by adding the following comment line before the code in question:
            // CHECKSTYLE:OFF XXX
            and the following at the end:
            // CHECKSTYLE:ON XXX
            (where XXX is the checkstyle check to turn off on the code in question)
    -->

    <!-- Miscellaneous other checks.                   -->
    <!-- See http://checkstyle.sf.net/config_misc.html -->
    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="message" value="Line has trailing spaces."/>
    </module>

    <!-- to prevent people like Mark P. checking in "TODO: Class comment." tag entries. -->
    <module name="RegexpSingleline">
        <property name="format" value="TODO: Class comment\."/>
        <property name="message" value="Add a class comment and don't be lazy."/>
    </module>

    <!-- Author tags confuse the (better) information from version control. -->
    <module name="RegexpSingleline">
        <property name="format" value="@author"/>
        <property name="message" value="Don't put author tags in the file."/>
    </module>

    <!-- Warn against using log4j -->
    <module name="RegexpSingleline">
        <property name="format" value="log4j"/>
        <property name="message" value="We use slf4j."/>
    </module>

    <!-- Stop using URLEncoder/URLDecoder. Use StringKit.(Un)escape*. -->
    <module name="RegexpSingleline">
        <property name="format" value="URL(En|De)coder.(en|de)code\("/>
        <property name="message" value="URLEncoder/URLDecoder has issues with synchronization and checked exceptions. Use StringKit.escapeForURLPlus/unescapeFromURLPlus."/>
    </module>

    <!-- Avoid hiding external class name by using import static. -->
    <module name="RegexpSingleline">
        <property name="format" value="^import static"/>
        <property name="message" value="Avoid using import static"/>
    </module>

    <!-- Make sure multi-catch is using consistent syntax -->
    <module name="RegexpSingleline">
        <property name="format" value="catch \(.*(\S+\|\S+|\S+ \|\S+|\S+\| \S+)"/>
        <property name="message" value="Use Exception0 | Exception1 for multi catch"/>
    </module>

    <!-- Easy mistake when catching InterruptedException -->
    <module name="RegexpSingleline">
        <property name="format" value="^\s+Thread\.interrupted"/>
        <property name="message" value="Use Thread.currentThread().interrupt();"/>
    </module>

    <!-- Never use getBytes() with default encoding. -->
    <module name="RegexpSingleline">
        <property name="format" value="getBytes\(\)"/>
        <property name="message" value="Never use getBytes without providing a charset"/>
    </module>

    <!-- Everything is nonnull by the default. -->
    <module name="RegexpSingleline">
        <property name="format" value="@Nonnull"/>
        <property name="message" value="@ParametersAreNonnullByDefault is already set for the package"/>
    </module>

</module>
